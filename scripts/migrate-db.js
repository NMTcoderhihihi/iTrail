const mongoose = require("mongoose");
// ƒê·∫£m b·∫£o file .env.local c·ªßa b·∫°n c√≥ bi·∫øn MongoDB_URI
require("dotenv").config({ path: ".env" });

// --- START: ƒê·ªãnh nghƒ©a Schema cho c√°c collection c·∫ßn di tr√∫ ---

const ZaloAccountSchema = new mongoose.Schema(
  {
    rateLimitPerHour: { type: Number, default: 30 },
    actionsUsedThisHour: { type: Number, default: 0 },
    rateLimitHourStart: { type: Date, default: () => new Date() },
    rateLimitPerDay: { type: Number, default: 200 },
    actionsUsedThisDay: { type: Number, default: 0 },
    rateLimitDayStart: { type: Date, default: () => new Date() },
    isLocked: { type: Boolean, default: false },
  },
  { strict: false }, // D√πng strict: false ƒë·ªÉ Mongoose kh√¥ng b√°o l·ªói v·ªõi c√°c tr∆∞·ªùng ƒë√£ c√≥ s·∫µn
);

const StatusSchema = new mongoose.Schema(
  {
    name: { type: String, required: true, unique: true },
    description: { type: String },
  },
  { strict: false },
);
const ActionHistorySchema = new mongoose.Schema(
  {
    "actionDetail.scheduleId": { type: mongoose.Schema.Types.Mixed }, // Cho ph√©p ƒë·ªçc c·∫£ String v√† ObjectId
  },
  { strict: false },
);
// --- END: ƒê·ªãnh nghƒ©a Schema ---

// --- START: Khai b√°o Models ---

const ZaloAccount =
  mongoose.models.zaloaccount ||
  mongoose.model("zaloaccount", ZaloAccountSchema);

const Status = mongoose.models.status || mongoose.model("status", StatusSchema);
const ActionHistory =
  mongoose.models.actionhistory ||
  mongoose.model("actionhistory", ActionHistorySchema);
// --- END: Khai b√°o Models ---

/**
 * Logic ƒë·ªÉ di tr√∫ d·ªØ li·ªáu cho collection 'zaloaccounts'.
 * Th√™m c√°c tr∆∞·ªùng c√≤n thi·∫øu v√† s·ª≠a c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh b·ªã sai.
 */
async function migrateZaloAccounts() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö T√ÄI KHO·∫¢N ZALO ---");

  // Logic c≈© ƒë·ªÉ t√¨m v√† s·ª≠a c√°c t√†i kho·∫£n Zalo
  const query = {
    $or: [
      { rateLimitPerDay: { $exists: false } },
      { actionsUsedThisDay: { $exists: false } },
      { rateLimitDayStart: { $exists: false } },
    ],
  };
  const count = await ZaloAccount.countDocuments(query);

  if (count === 0) {
    console.log(
      "‚úÖ T·∫•t c·∫£ c√°c t√†i kho·∫£n Zalo ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô. Kh√¥ng c·∫ßn di tr√∫.",
    );
    return;
  }

  console.log(`üîç T√¨m th·∫•y ${count} t√†i kho·∫£n Zalo c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t...`);
  const updateOperation = {
    $set: {
      rateLimitPerDay: 200,
      actionsUsedThisDay: 0,
      rateLimitDayStart: new Date(),
    },
  };
  const result = await ZaloAccount.updateMany(query, updateOperation);
  console.log(`‚ú® C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.modifiedCount} t√†i kho·∫£n Zalo!`);
}

/**
 * Logic ƒë·ªÉ di tr√∫ d·ªØ li·ªáu cho collection 'statuses'.
 * T·ª± ƒë·ªông ƒë·ªãnh d·∫°ng l·∫°i t√™n c√°c tr·∫°ng th√°i theo chu·∫©n QTxx| <t√™n>.
 */
async function migrateStatuses() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö TR·∫†NG TH√ÅI ---");
  // T√¨m t·∫•t c·∫£ c√°c tr·∫°ng th√°i CH∆ØA c√≥ ƒë·ªãnh d·∫°ng QTxx|
  const statusesToMigrate = await Status.find({ name: { $not: /^QT\d+\|/ } })
    .sort({ createdAt: 1 })
    .lean();

  if (statusesToMigrate.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn di tr√∫. D·ªØ li·ªáu ƒë√£ chu·∫©n.");
    return;
  }

  console.log(
    `üîç T√¨m th·∫•y ${statusesToMigrate.length} tr·∫°ng th√°i c·∫ßn chuy·ªÉn ƒë·ªïi...`,
  );

  const bulkOperations = statusesToMigrate.map((status, index) => {
    // T·∫°o s·ªë th·ª© t·ª±, v√≠ d·ª•: 1 -> "01", 10 -> "10"
    const order = String(index + 1).padStart(2, "0");
    const newName = `QT${order}| ${status.name.trim()}`;
    console.log(`  -> Chuy·ªÉn ƒë·ªïi "${status.name}" th√†nh "${newName}"`);

    return {
      updateOne: {
        filter: { _id: status._id },
        update: { $set: { name: newName } },
      },
    };
  });

  const result = await Status.bulkWrite(bulkOperations);
  console.log(`‚ú® C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.modifiedCount} tr·∫°ng th√°i!`);
}

async function migrateScheduleIds() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö SCHEDULE ID ---");
  // T√¨m t·∫•t c·∫£ c√°c b·∫£n ghi c√≥ actionDetail.scheduleId l√† ki·ªÉu STRING
  const query = { "actionDetail.scheduleId": { $type: "string" } };

  const historiesToMigrate = await ActionHistory.find(query).lean();

  if (historiesToMigrate.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≥ scheduleId n√†o c·∫ßn di tr√∫. D·ªØ li·ªáu ƒë√£ chu·∫©n.");
    return;
  }

  console.log(
    `üîç T√¨m th·∫•y ${historiesToMigrate.length} b·∫£n ghi l·ªãch s·ª≠ c·∫ßn chuy·ªÉn ƒë·ªïi scheduleId...`,
  );

  const bulkOperations = historiesToMigrate
    .map((history) => {
      // Ch·ªâ th·ª±c hi·ªán n·∫øu chu·ªói l√† m·ªôt ObjectId h·ª£p l·ªá
      if (mongoose.Types.ObjectId.isValid(history.actionDetail.scheduleId)) {
        return {
          updateOne: {
            filter: { _id: history._id },
            update: {
              $set: {
                "actionDetail.scheduleId": new mongoose.Types.ObjectId(
                  history.actionDetail.scheduleId,
                ),
              },
            },
          },
        };
      }
      return null; // B·ªè qua c√°c chu·ªói kh√¥ng h·ª£p l·ªá
    })
    .filter(Boolean); // L·ªçc ra c√°c gi√° tr·ªã null

  if (bulkOperations.length > 0) {
    const result = await ActionHistory.bulkWrite(bulkOperations);
    console.log(
      `‚ú® Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng ${result.modifiedCount} scheduleId t·ª´ String sang ObjectId!`,
    );
  } else {
    console.log("‚úÖ Kh√¥ng c√≥ scheduleId h·ª£p l·ªá n√†o ƒë·ªÉ chuy·ªÉn ƒë·ªïi.");
  }
}

/**
 * H√†m ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô qu√° tr√¨nh di tr√∫.
 */
async function runMigration() {
  const mongoURI = process.env.MongoDB_URI;
  if (!mongoURI) {
    console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng 'MongoDB_URI' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return;
  }

  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...");
    await mongoose.connect(mongoURI);
    console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

    // --- CH·ªåN LOGIC C·∫¶N CH·∫†Y ---
    // B·ªè comment d√≤ng t∆∞∆°ng ·ª©ng ƒë·ªÉ ch·∫°y logic di tr√∫ b·∫°n mu·ªën.
    // N√™n ch·∫°y t·ª´ng c√°i m·ªôt ƒë·ªÉ d·ªÖ ki·ªÉm so√°t.

    // Ch·∫°y logic di tr√∫ cho collection 'statuses'
    // await migrateStatuses();

    // Ch·∫°y logic di tr√∫ cho collection 'zaloaccounts'
    // await migrateZaloAccounts();
    await migrateScheduleIds(); // ++ ADDED: Ch·∫°y logic m·ªõi
  } catch (error) {
    console.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di tr√∫:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MongoDB.");
  }
}

// Ch·∫°y h√†m di tr√∫ ch√≠nh
runMigration();
