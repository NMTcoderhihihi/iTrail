// scripts/migrate-db.js

/**
 * K·ªäCH B·∫¢N DI CHUY·ªÇN D·ªÆ LI·ªÜU
 * Ch·∫°y file n√†y m·ªôt l·∫ßn duy nh·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t c·∫•u tr√∫c DB sang phi√™n b·∫£n m·ªõi.
 * L·ªánh ch·∫°y: node scripts/migrate-db.js
 */

const mongoose = require("mongoose");
require("dotenv").config({ path: "./.env.local" });
const { Schema } = mongoose;

// =============================================================================
// === B∆Ø·ªöC 1: C·∫§U H√åNH SCRIPT ===
// =============================================================================

// !!! QUAN TR·ªåNG: H√£y thay th·∫ø gi√° tr·ªã n√†y b·∫±ng m·ªôt ID c·ªßa user c√≥ vai tr√≤ Admin
// trong database c·ªßa b·∫°n. N√≥ s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ g√°n cho c√°c comment c≈©.
const DEFAULT_ADMIN_ID = "6865fe3ccdec836f29fabe4f"; // <--- THAY TH·∫æ ID N√ÄY

// --- ƒê·ªäNH NGHƒ®A L·∫†I C√ÅC SCHEMA M·ªöI ---
// (D√°n c√°c schema ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t c·ªßa b·∫°n v√†o ƒë√¢y)

const UserSchema = new Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    iduser: { type: String, unique: true, sparse: true },
    role: { type: String, enum: ["Admin", "Employee"], default: "Employee" },
    zaloActive: {
      type: Schema.Types.ObjectId,
      ref: "zaloaccount",
      default: null,
    },
  },
  { timestamps: true },
);

const CommentSchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: "user", required: true },
  stage: { type: Number, required: true },
  detail: { type: String, required: true },
  time: { type: Date, default: Date.now },
});

const CustomerSchema = new Schema(
  {
    name: { type: String },
    phone: { type: String, required: true },
    uid: { type: String },
    status: { type: Schema.Types.ObjectId, ref: "status" },
    stageLevel: { type: Number, default: 0 },
    comments: [CommentSchema],
    users: [{ type: Schema.Types.ObjectId, ref: "user" }],
  },
  { timestamps: true, strict: false },
);

const ActiveSessionSchema = new Schema(
  {
    userId: { type: Schema.Types.ObjectId, ref: "user", required: true },
    activatedAt: { type: Date, default: Date.now },
  },
  { _id: false },
);

const ZaloAccountSchema = new Schema(
  {
    uid: { type: String, required: true, unique: true, trim: true },
    name: { type: String, required: true, trim: true },
    phone: { type: String, required: true },
    avt: { type: String },
    rateLimitPerHour: { type: Number, required: true, default: 50 },
    users: [{ type: Schema.Types.ObjectId, ref: "user" }],
    activeSession: { type: ActiveSessionSchema, default: null },
    isLocked: { type: Boolean, default: false },
  },
  { timestamps: true },
);

// --- ƒêƒÇNG K√ù MODEL ---
const User = mongoose.models.user || mongoose.model("user", UserSchema);
const Customer =
  mongoose.models.customer || mongoose.model("customer", CustomerSchema);
const ZaloAccount =
  mongoose.models.zaloaccount ||
  mongoose.model("zaloaccount", ZaloAccountSchema);

// =============================================================================
// === B∆Ø·ªöC 2: C√ÅC H√ÄM DI CHUY·ªÇN D·ªÆ LI·ªÜU ===
// =============================================================================

async function migrateUsers() {
  console.log("\n[1/3] B·∫Øt ƒë·∫ßu di chuy·ªÉn collection 'users'...");
  const roleMigrationLogic = {
    $cond: {
      if: { $isArray: "$role" },
      then: { $ifNull: [{ $arrayElemAt: ["$role", 0] }, "Employee"] },
      else: "$role",
    },
  };
  const result = await User.updateMany({}, [
    {
      $set: { password: "$uid", zaloActive: "$zalo", role: roleMigrationLogic },
    },
    { $unset: ["uid", "zalo", "address", "avt"] },
  ]);
  console.log(`Ho√†n t·∫•t: ƒê√£ x·ª≠ l√Ω ${result.matchedCount} users.`);
}

/**
 * Di chuy·ªÉn collection 'customers' b·∫±ng Aggregation Pipeline.
 * ƒê√£ s·ª≠a l·ªói kh√¥ng th√™m comment r·ªóng v√† th√™m logic g√°n th·ªùi gian.
 */
async function migrateCustomers() {
  console.log("\n[2/3] B·∫Øt ƒë·∫ßu di chuy·ªÉn collection 'customers'...");

  // Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu di chuy·ªÉn ƒë·ªÉ g√°n cho c√°c comment c≈©
  const migrationTime = new Date();

  const createCommentIfNotEmpty = (noteField) => ({
    $cond: {
      if: {
        $and: [
          { $ne: [`$${noteField}`, null] },
          { $ne: [`$${noteField}`, ""] },
        ],
      },
      then: [
        {
          user: { $ifNull: [{ $arrayElemAt: ["$auth", 0] }, DEFAULT_ADMIN_ID] },
          stage: { $ifNull: ["$stageLevel", 0] },
          detail: `$${noteField}`,
          // START: TH√äM D√íNG N√ÄY
          time: migrationTime, // G√°n th·ªùi ƒëi·ªÉm ch·∫°y script cho comment
          // END: TH√äM D√íNG N√ÄY
        },
      ],
      else: [],
    },
  });

  const commentsPipeline = {
    $concatArrays: [
      { $ifNull: ["$comments", []] },
      createCommentIfNotEmpty("careNote"),
      createCommentIfNotEmpty("studyTryNote"),
      createCommentIfNotEmpty("studyNote"),
    ],
  };

  const result = await Customer.updateMany({}, [
    {
      $set: {
        users: { $ifNull: ["$auth", "$users"] },
        comments: commentsPipeline,
      },
    },
    {
      $unset: ["auth", "careNote", "studyTryNote", "studyNote"],
    },
  ]);

  console.log(`Ho√†n t·∫•t: ƒê√£ x·ª≠ l√Ω ${result.matchedCount} customers.`);
}

async function migrateZaloAccounts() {
  console.log("\n[3/3] B·∫Øt ƒë·∫ßu di chuy·ªÉn collection 'zaloaccounts'...");

  // S·ª¨A L·ªñI: S·ª≠ d·ª•ng ƒëi·ªÅu ki·ªán t√¨m ki·∫øm linh ho·∫°t h∆°n.
  // N√≥ s·∫Ω t√¨m t·∫•t c·∫£ c√°c document c√≥ tr∆∞·ªùng 'user' (d·∫•u hi·ªáu c·ªßa d·ªØ li·ªáu c≈©)
  // v√† ch∆∞a c√≥ tr∆∞·ªùng 'users' (d·∫•u hi·ªáu ch∆∞a ƒë∆∞·ª£c di chuy·ªÉn).
  const result = await ZaloAccount.updateMany(
    { user: { $exists: true }, users: { $exists: false } },
    [
      {
        $set: {
          users: ["$user"], // Chuy·ªÉn user th√†nh m·ªôt m·∫£ng ch·ª©a ch√≠nh n√≥
          activeSession: null,
        },
      },
      {
        $unset: ["user"], // X√≥a tr∆∞·ªùng 'user' c≈©
      },
    ],
  );
  console.log(`Ho√†n t·∫•t: ƒê√£ x·ª≠ l√Ω ${result.matchedCount} zaloaccounts.`);
}

// =============================================================================
// === B∆Ø·ªöC 3: H√ÄM CH·∫†Y CH√çNH ===
// =============================================================================
async function runMigration() {
  if (!process.env.MONGODB_URI) {
    throw new Error(
      "L·ªói: Kh√¥ng t√¨m th·∫•y bi·∫øn MONGODB_URI trong file .env.local",
    );
  }
  if (DEFAULT_ADMIN_ID === "YOUR_REAL_ADMIN_ID_HERE") {
    throw new Error(
      "L·ªói: Vui l√≤ng c·∫≠p nh·∫≠t DEFAULT_ADMIN_ID trong script tr∆∞·ªõc khi ch·∫°y.",
    );
  }
  console.log("ƒêang k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu...");
  await mongoose.connect(process.env.MONGODB_URI);
  console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

  // await migrateUsers();
  // await migrateCustomers();
  // await migrateZaloAccounts();

  console.log("\nüéâ Qu√° tr√¨nh di chuy·ªÉn d·ªØ li·ªáu ƒë√£ ho√†n t·∫•t th√†nh c√¥ng!");
  await mongoose.connection.close();
}

runMigration().catch((error) => {
  console.error("\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di chuy·ªÉn:", error);
  mongoose.connection.close();
  process.exit(1);
});
