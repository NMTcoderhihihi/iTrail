const mongoose = require("mongoose");
// ƒê·∫£m b·∫£o file .env.local c·ªßa b·∫°n c√≥ bi·∫øn MongoDB_URI
require("dotenv").config({ path: ".env" });

const ScheduledJob =
  mongoose.models.scheduledjob ||
  mongoose.model("scheduledjob", new mongoose.Schema({}, { strict: false }));

const ArchivedJob =
  mongoose.models.archivedjob ||
  mongoose.model("archivedjob", new mongoose.Schema({}, { strict: false }));

const Customer =
  mongoose.models.customer ||
  mongoose.model("customer", new mongoose.Schema({}, { strict: false }));

// --- START: ƒê·ªãnh nghƒ©a Schema cho c√°c collection c·∫ßn di tr√∫ ---

const ZaloAccountSchema = new mongoose.Schema(
  {
    rateLimitPerHour: { type: Number, default: 30 },
    actionsUsedThisHour: { type: Number, default: 0 },
    rateLimitHourStart: { type: Date, default: () => new Date() },
    rateLimitPerDay: { type: Number, default: 200 },
    actionsUsedThisDay: { type: Number, default: 0 },
    rateLimitDayStart: { type: Date, default: () => new Date() },
    isLocked: { type: Boolean, default: false },
  },
  { strict: false }, // D√πng strict: false ƒë·ªÉ Mongoose kh√¥ng b√°o l·ªói v·ªõi c√°c tr∆∞·ªùng ƒë√£ c√≥ s·∫µn
);

const StatusSchema = new mongoose.Schema(
  {
    name: { type: String, required: true, unique: true },
    description: { type: String },
  },
  { strict: false },
);
const ActionHistorySchema = new mongoose.Schema(
  {
    "actionDetail.scheduleId": { type: mongoose.Schema.Types.Mixed }, // Cho ph√©p ƒë·ªçc c·∫£ String v√† ObjectId
  },
  { strict: false },
);
// --- END: ƒê·ªãnh nghƒ©a Schema ---

// --- START: Khai b√°o Models ---

const ZaloAccount =
  mongoose.models.zaloaccount ||
  mongoose.model("zaloaccount", ZaloAccountSchema);

const Status = mongoose.models.status || mongoose.model("status", StatusSchema);
const ActionHistory =
  mongoose.models.actionhistory ||
  mongoose.model("actionhistory", ActionHistorySchema);
// --- END: Khai b√°o Models ---

/**
 * Logic ƒë·ªÉ di tr√∫ d·ªØ li·ªáu cho collection 'zaloaccounts'.
 * Th√™m c√°c tr∆∞·ªùng c√≤n thi·∫øu v√† s·ª≠a c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh b·ªã sai.
 */
async function migrateZaloAccounts() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö T√ÄI KHO·∫¢N ZALO ---");

  // Logic c≈© ƒë·ªÉ t√¨m v√† s·ª≠a c√°c t√†i kho·∫£n Zalo
  const query = {
    $or: [
      { rateLimitPerDay: { $exists: false } },
      { actionsUsedThisDay: { $exists: false } },
      { rateLimitDayStart: { $exists: false } },
    ],
  };
  const count = await ZaloAccount.countDocuments(query);

  if (count === 0) {
    console.log(
      "‚úÖ T·∫•t c·∫£ c√°c t√†i kho·∫£n Zalo ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô. Kh√¥ng c·∫ßn di tr√∫.",
    );
    return;
  }

  console.log(`üîç T√¨m th·∫•y ${count} t√†i kho·∫£n Zalo c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t...`);
  const updateOperation = {
    $set: {
      rateLimitPerDay: 200,
      actionsUsedThisDay: 0,
      rateLimitDayStart: new Date(),
    },
  };
  const result = await ZaloAccount.updateMany(query, updateOperation);
  console.log(`‚ú® C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.modifiedCount} t√†i kho·∫£n Zalo!`);
}

/**
 * Logic ƒë·ªÉ di tr√∫ d·ªØ li·ªáu cho collection 'statuses'.
 * T·ª± ƒë·ªông ƒë·ªãnh d·∫°ng l·∫°i t√™n c√°c tr·∫°ng th√°i theo chu·∫©n QTxx| <t√™n>.
 */
// ** MODIFIED: C·∫≠p nh·∫≠t to√†n b·ªô h√†m migrateStatuses
async function migrateStatuses() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö TR·∫†NG TH√ÅI ---");

  // B∆∞·ªõc 1: T√¨m t·∫•t c·∫£ c√°c tr·∫°ng th√°i CH∆ØA c√≥ ƒë·ªãnh d·∫°ng chu·∫©n (QTxx|)
  const statusesToMigrate = await Status.find({
    name: { $not: /^QT\d+\|/ },
  }).lean();

  if (statusesToMigrate.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≥ tr·∫°ng th√°i n√†o c·∫ßn di tr√∫. D·ªØ li·ªáu ƒë√£ chu·∫©n.");
    return;
  }

  console.log(
    `üîç T√¨m th·∫•y ${statusesToMigrate.length} tr·∫°ng th√°i c·∫ßn x·ª≠ l√Ω...`,
  );

  // B∆∞·ªõc 2: T√¨m s·ªë th·ª© t·ª± QT l·ªõn nh·∫•t ƒë√£ t·ªìn t·∫°i trong DB (ƒë·ªÉ ƒë√°nh s·ªë cho c√°c tr·∫°ng th√°i m·ªõi)
  const allStatuses = await Status.find({ name: /^QT\d+\|/ }).lean();
  let maxOrder = 0;
  allStatuses.forEach((status) => {
    const match = status.name.match(/^QT(\d+)\|/);
    if (match) {
      const order = parseInt(match[1], 10);
      if (order > maxOrder) {
        maxOrder = order;
      }
    }
  });

  console.log(`üìà S·ªë th·ª© t·ª± QT l·ªõn nh·∫•t hi·ªán t·∫°i l√†: ${maxOrder}`);

  // B∆∞·ªõc 3: Chu·∫©n b·ªã c√°c l·ªánh c·∫≠p nh·∫≠t h√†ng lo·∫°t
  const bulkOperations = statusesToMigrate.map((status) => {
    let newName = "";
    const oldName = status.name.trim();

    // Regex ƒë·ªÉ t√¨m ƒë·ªãnh d·∫°ng c≈©, v√≠ d·ª•: "QT1: Ten trang thai"
    const oldFormatMatch = oldName.match(/^QT(\d+):\s*(.*)/);

    if (oldFormatMatch) {
      // TR∆Ø·ªúNG H·ª¢P 1: Chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªãnh d·∫°ng c≈©
      const orderNumber = parseInt(oldFormatMatch[1], 10);
      const cleanName = oldFormatMatch[2].trim();

      // ƒê·∫£m b·∫£o s·ªë th·ª© t·ª± lu√¥n c√≥ 2 ch·ªØ s·ªë (01, 02, ..., 11)
      const paddedOrder = String(orderNumber).padStart(2, "0");
      newName = `QT${paddedOrder}| ${cleanName}`;

      console.log(`  -> CHUY·ªÇN ƒê·ªîI: "${oldName}"  ==>  "${newName}"`);
    } else {
      // TR∆Ø·ªúNG H·ª¢P 2: Th√™m m·ªõi ti·ªÅn t·ªë cho tr·∫°ng th√°i ch∆∞a c√≥
      maxOrder++; // TƒÉng s·ªë th·ª© t·ª± l√™n cho tr·∫°ng th√°i m·ªõi
      const paddedOrder = String(maxOrder).padStart(2, "0");
      newName = `QT${paddedOrder}| ${oldName}`;

      console.log(`  -> TH√äM M·ªöI:   "${oldName}"  ==>  "${newName}"`);
    }

    return {
      updateOne: {
        filter: { _id: status._id },
        update: { $set: { name: newName } },
      },
    };
  });

  // B∆∞·ªõc 4: Th·ª±c thi l·ªánh
  if (bulkOperations.length > 0) {
    const result = await Status.bulkWrite(bulkOperations);
    console.log(`‚ú® C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.modifiedCount} tr·∫°ng th√°i!`);
  }
}

async function migrateScheduleIds() {
  console.log("\n--- B·∫ÆT ƒê·∫¶U DI TR√ö SCHEDULE ID ---");
  // T√¨m t·∫•t c·∫£ c√°c b·∫£n ghi c√≥ actionDetail.scheduleId l√† ki·ªÉu STRING
  const query = { "actionDetail.scheduleId": { $type: "string" } };

  const historiesToMigrate = await ActionHistory.find(query).lean();

  if (historiesToMigrate.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≥ scheduleId n√†o c·∫ßn di tr√∫. D·ªØ li·ªáu ƒë√£ chu·∫©n.");
    return;
  }

  console.log(
    `üîç T√¨m th·∫•y ${historiesToMigrate.length} b·∫£n ghi l·ªãch s·ª≠ c·∫ßn chuy·ªÉn ƒë·ªïi scheduleId...`,
  );

  const bulkOperations = historiesToMigrate
    .map((history) => {
      // Ch·ªâ th·ª±c hi·ªán n·∫øu chu·ªói l√† m·ªôt ObjectId h·ª£p l·ªá
      if (mongoose.Types.ObjectId.isValid(history.actionDetail.scheduleId)) {
        return {
          updateOne: {
            filter: { _id: history._id },
            update: {
              $set: {
                "actionDetail.scheduleId": new mongoose.Types.ObjectId(
                  history.actionDetail.scheduleId,
                ),
              },
            },
          },
        };
      }
      return null; // B·ªè qua c√°c chu·ªói kh√¥ng h·ª£p l·ªá
    })
    .filter(Boolean); // L·ªçc ra c√°c gi√° tr·ªã null

  if (bulkOperations.length > 0) {
    const result = await ActionHistory.bulkWrite(bulkOperations);
    console.log(
      `‚ú® Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng ${result.modifiedCount} scheduleId t·ª´ String sang ObjectId!`,
    );
  } else {
    console.log("‚úÖ Kh√¥ng c√≥ scheduleId h·ª£p l·ªá n√†o ƒë·ªÉ chuy·ªÉn ƒë·ªïi.");
  }
}

// ++ ADDED: H√†m di tr√∫ v√† d·ªçn d·∫πp c√°c job b·ªã treo
async function migrateAndCleanupHungJobs() {
  console.log(
    "\n--- B·∫ÆT ƒê·∫¶U DI TR√ö & D·ªåN D·∫∏P JOB B·ªä TREO (PHI√äN B·∫¢N HO√ÄN THI·ªÜN) ---",
  );

  // --- B∆∞·ªõc 1: Qu√©t v√† thu th·∫≠p d·ªØ li·ªáu t·ª´ c√°c job b·ªã treo ---
  const hungJobs = await ScheduledJob.find({}).lean();

  if (hungJobs.length === 0) {
    console.log("‚úÖ Kh√¥ng t√¨m th·∫•y job n√†o b·ªã treo trong 'scheduledjobs'.");
    return;
  }

  console.log(`üîç T√¨m th·∫•y ${hungJobs.length} job b·ªã treo c·∫ßn x·ª≠ l√Ω...`);

  const jobsToArchive = [];
  const allHungJobIds = hungJobs.map((job) => job._id);

  // --- B∆∞·ªõc 2: T√≠nh to√°n l·∫°i Th√¥ng s·ªë & Chu·∫©n b·ªã Di tr√∫ ---
  for (const job of hungJobs) {
    console.log(`  -> ƒêang x·ª≠ l√Ω Job: "${job.jobName}" (${job._id})`);

    const stats = job.statistics || { total: 0, completed: 0, failed: 0 };

    // ƒê·∫øm s·ªë task ch∆∞a ho√†n th√†nh (b·ªã treo)
    const pendingOrProcessingTasks = (job.tasks || []).filter(
      (task) => task.status === "pending" || task.status === "processing",
    ).length;

    // T√≠nh to√°n l·∫°i th·ªëng k√™ m·ªôt c√°ch ch√≠nh x√°c
    const recalculatedStats = {
      total: stats.total || (job.tasks || []).length,
      completed: stats.completed || 0,
      // **LOGIC CHU·∫®N**: failed m·ªõi = failed c≈© + s·ªë l∆∞·ª£ng b·ªã treo
      failed: (stats.failed || 0) + pendingOrProcessingTasks,
    };

    const archiveData = {
      ...job,
      _id: job._id,
      status: "failed", // Coi nh∆∞ to√†n b·ªô job ƒë√£ th·∫•t b·∫°i do b·ªã d·ª´ng
      statistics: recalculatedStats,
      completedAt: new Date(),
    };
    delete archiveData.tasks;

    jobsToArchive.push(archiveData);
    console.log(
      `     - Th·ªëng k√™ c≈©:      Completed: ${stats.completed}, Failed: ${stats.failed}`,
    );
    console.log(`     - Task b·ªã treo:     ${pendingOrProcessingTasks}`);
    console.log(
      `     - Th·ªëng k√™ M·ªöI:     Completed: ${recalculatedStats.completed}, Failed: ${recalculatedStats.failed}`,
    );
  }

  // --- B∆∞·ªõc 3: D·ªçn d·∫πp v√† Di tr√∫ ---
  const session = await mongoose.startSession();
  try {
    session.startTransaction();
    console.log("\nüîÑ B·∫Øt ƒë·∫ßu giao d·ªãch di tr√∫ v√† d·ªçn d·∫πp...");

    // 1. Di tr√∫ c√°c job ƒë√£ chu·∫©n h√≥a
    if (jobsToArchive.length > 0) {
      await ArchivedJob.insertMany(jobsToArchive, { session });
      console.log(
        `  [1/3] ‚úÖ ƒê√£ di tr√∫ ${jobsToArchive.length} job sang 'archivedjobs'.`,
      );
    }

    // 2. **LOGIC CHU·∫®N**: D·ªçn d·∫πp TO√ÄN B·ªò tham chi·∫øu action li√™n quan ƒë·∫øn c√°c job b·ªã treo
    const customerUpdateResult = await Customer.updateMany(
      { "action.job": { $in: allHungJobIds } }, // T√¨m t·∫•t c·∫£ customer c√≥ action li√™n quan
      { $pull: { action: { job: { $in: allHungJobIds } } } },
      { session },
    );
    console.log(
      `  [2/3] ‚úÖ ƒê√£ d·ªçn d·∫πp tham chi·∫øu 'action' cho ${customerUpdateResult.modifiedCount} kh√°ch h√†ng.`,
    );

    // 3. X√≥a c√°c job g·ªëc
    const deleteResult = await ScheduledJob.deleteMany(
      { _id: { $in: allHungJobIds } },
      { session },
    );
    console.log(
      `  [3/3] ‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} job g·ªëc kh·ªèi 'scheduledjobs'.`,
    );

    await session.commitTransaction();
    console.log("\n‚ú® Giao d·ªãch ho√†n t·∫•t! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch√≠nh x√°c.");
  } catch (error) {
    await session.abortTransaction();
    console.error(
      "\n‚ùå ƒê√£ x·∫£y ra l·ªói trong giao d·ªãch! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c.",
      error,
    );
  } finally {
    session.endSession();
  }
}
/**
 * H√†m ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô qu√° tr√¨nh di tr√∫.
 */
async function runMigration() {
  const mongoURI = process.env.MongoDB_URI;
  if (!mongoURI) {
    console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng 'MongoDB_URI' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return;
  }

  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...");
    await mongoose.connect(mongoURI);
    console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

    // --- CH·ªåN LOGIC C·∫¶N CH·∫†Y ---
    // B·ªè comment d√≤ng t∆∞∆°ng ·ª©ng ƒë·ªÉ ch·∫°y logic di tr√∫ b·∫°n mu·ªën.
    // N√™n ch·∫°y t·ª´ng c√°i m·ªôt ƒë·ªÉ d·ªÖ ki·ªÉm so√°t.

    // Ch·∫°y logic di tr√∫ cho collection 'statuses'
    await migrateStatuses();

    // Ch·∫°y logic di tr√∫ cho collection 'zaloaccounts'
    await migrateZaloAccounts();
    await migrateScheduleIds(); // ++ ADDED: Ch·∫°y logic m·ªõi
    // ++ ADDED: Ch·∫°y logic di tr√∫ v√† d·ªçn d·∫πp job b·ªã treo
    await migrateAndCleanupHungJobs();
  } catch (error) {
    console.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di tr√∫:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MongoDB.");
  }
}

// Ch·∫°y h√†m di tr√∫ ch√≠nh
runMigration();
