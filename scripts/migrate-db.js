// migrate_zalo_accounts.js

const mongoose = require("mongoose");
require("dotenv").config({ path: ".env" });

// --- ƒê·ªãnh nghƒ©a l·∫°i Schema c·ªßa ZaloAccount ƒë·ªÉ script hi·ªÉu ---
const ZaloAccountSchema = new mongoose.Schema(
  {
    // Ch√∫ng ta kh√¥ng c·∫ßn ƒë·ªãnh nghƒ©a l·∫°i to√†n b·ªô, ch·ªâ c·∫ßn c√°c tr∆∞·ªùng li√™n quan
    rateLimitPerDay: { type: Number, default: 200 },
    actionsUsedThisDay: { type: Number, default: 0 },
    rateLimitDayStart: { type: Date, default: () => new Date() },
  },
  { strict: false },
); // strict: false ƒë·ªÉ Mongoose kh√¥ng x√≥a c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a

const ZaloAccount =
  mongoose.models.zaloaccount ||
  mongoose.model("zaloaccount", ZaloAccountSchema);

// --- H√†m ch√≠nh ƒë·ªÉ ch·∫°y di tr√∫ ---
async function runMigration() {
  const mongoURI = process.env.MONGODB_URI;
  if (!mongoURI) {
    console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng MONGODB_URI ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return;
  }

  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...");
    await mongoose.connect(mongoURI);
    console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

    // T√¨m t·∫•t c·∫£ c√°c t√†i kho·∫£n Zalo ch∆∞a c√≥ tr∆∞·ªùng `rateLimitPerDay`
    const accountsToUpdate = await ZaloAccount.find({
      rateLimitPerDay: { $exists: false },
    });

    if (accountsToUpdate.length === 0) {
      console.log(
        "‚úÖ T·∫•t c·∫£ c√°c t√†i kho·∫£n Zalo ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Kh√¥ng c·∫ßn di tr√∫.",
      );
      return;
    }

    console.log(
      `üîç T√¨m th·∫•y ${accountsToUpdate.length} t√†i kho·∫£n c·∫ßn c·∫≠p nh·∫≠t...`,
    );

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t h√†ng lo·∫°t
    const result = await ZaloAccount.updateMany(
      { rateLimitPerDay: { $exists: false } }, // ƒêi·ªÅu ki·ªán: ch·ªâ c·∫≠p nh·∫≠t nh·ªØng document thi·∫øu tr∆∞·ªùng n√†y
      {
        $set: {
          rateLimitPerDay: 200,
          actionsUsedThisDay: 0,
          rateLimitDayStart: new Date(),
        },
      },
    );

    console.log(`‚ú® C·∫≠p nh·∫≠t th√†nh c√¥ng ${result.modifiedCount} t√†i kho·∫£n!`);
  } catch (error) {
    console.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh di tr√∫:", error);
  } finally {
    // ƒê·∫£m b·∫£o lu√¥n ƒë√≥ng k·∫øt n·ªëi
    await mongoose.disconnect();
    console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MongoDB.");
  }
}

// Ch·∫°y h√†m
runMigration();
