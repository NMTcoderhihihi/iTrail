// [MOD] scripts/seed-test-data.js
import { Schema, mongoose } from "mongoose";
import dotenv from "dotenv";

dotenv.config({ path: ".env" });

// =================================================================
// === SCRIPT TH√äM D·ªÆ LI·ªÜU M·∫™U (SEEDING) ===
// =================================================================

// --- ƒê·ªãnh nghƒ©a Schema c·∫ßn thi·∫øt ---
const UserSchema = new Schema({}, { strict: false, collection: "users" });
const TagSchema = new Schema({}, { strict: false, collection: "tags" });
const CareProgramSchema = new Schema(
  {},
  { strict: false, collection: "careprograms" },
);
// [ADD] Th√™m Customer Schema ƒë·ªÉ c·∫≠p nh·∫≠t
const CustomerSchema = new Schema(
  {},
  { strict: false, collection: "customers" },
);

const User = mongoose.models.user || mongoose.model("user", UserSchema);
const Tag = mongoose.models.tag || mongoose.model("tag", TagSchema);
const CareProgram =
  mongoose.models.careProgram ||
  mongoose.model("careProgram", CareProgramSchema);
// [ADD] Th√™m Customer Model
const Customer =
  mongoose.models.customer || mongoose.model("customer", CustomerSchema);

// --- D·ªØ li·ªáu m·∫´u ---
const DEFAULT_ADMIN_ID = new mongoose.Types.ObjectId(
  "6865fe3ccdec836f29fabe4f",
);

const newCareProgram = {
  name: "ChƒÉm s√≥c kh√°ch h√†ng VIP",
  description:
    "Ch∆∞∆°ng tr√¨nh chƒÉm s√≥c ƒë·∫∑c bi·ªát d√†nh cho c√°c kh√°ch h√†ng ti·ªÅm nƒÉng cao.",
  isActive: true,
  users: [DEFAULT_ADMIN_ID],
  stages: [
    { _id: new mongoose.Types.ObjectId(), name: "Ti·∫øp c·∫≠n", level: 1 },
    { _id: new mongoose.Types.ObjectId(), name: "T∆∞ v·∫•n", level: 2 },
    { _id: new mongoose.Types.ObjectId(), name: "Ch·ªët sale", level: 3 },
  ],
  statuses: [
    { _id: new mongoose.Types.ObjectId(), name: "VIP01 | ƒê√£ g·ª≠i b√°o gi√°" },
    { _id: new mongoose.Types.ObjectId(), name: "VIP02 | ƒê√£ h·∫πn g·∫∑p" },
    { _id: new mongoose.Types.ObjectId(), name: "VIP03 | T·ª´ ch·ªëi" },
  ],
};

const sampleTags = [
  {
    name: "Ti·ªÅm nƒÉng",
    detail: "Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng ch·ªët cao",
    createdBy: DEFAULT_ADMIN_ID,
  },
  {
    name: "C·∫ßn g·ªçi l·∫°i",
    detail: "∆Øu ti√™n g·ªçi l·∫°i trong ng√†y",
    createdBy: DEFAULT_ADMIN_ID,
  },
  {
    name: "VIP",
    detail: "Kh√°ch h√†ng thu·ªôc nh√≥m ∆∞u ti√™n ƒë·∫∑c bi·ªát",
    createdBy: DEFAULT_ADMIN_ID,
  },
  {
    name: "Ngu·ªìn Zalo",
    detail: "Kh√°ch h√†ng ƒë·∫øn t·ª´ k√™nh Zalo",
    createdBy: DEFAULT_ADMIN_ID,
  },
];

// [ADD] SƒêT c·ªßa kh√°ch h√†ng c·∫ßn g√°n
const customerPhoneToEnroll = "0329622705"; // <-- B·∫†N C√ì TH·ªÇ THAY SƒêT N√ÄY

// --- H√†m th·ª±c thi ch√≠nh ---
async function seedData() {
  const mongoURI = process.env.MONGODB_URI;
  if (!mongoURI) {
    console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng 'MONGODB_URI' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return;
  }

  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...");
    await mongoose.connect(mongoURI);
    console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

    // 1. Th√™m ch∆∞∆°ng tr√¨nh chƒÉm s√≥c m·ªõi
    const programResult = await CareProgram.findOneAndUpdate(
      { name: newCareProgram.name },
      { $setOnInsert: newCareProgram },
      { upsert: true, new: true },
    );
    console.log(
      `   -> ‚úÖ ƒê√£ th√™m/c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh: "${newCareProgram.name}"`,
    );

    // 2. Th√™m c√°c tag m·∫´u
    for (const tag of sampleTags) {
      await Tag.updateOne(
        { name: tag.name },
        { $setOnInsert: tag },
        { upsert: true },
      );
    }
    console.log(`   -> ‚úÖ ƒê√£ th√™m/c·∫≠p nh·∫≠t ${sampleTags.length} tags m·∫´u.`);

    // [ADD] 3. G√°n kh√°ch h√†ng v√†o ch∆∞∆°ng tr√¨nh VIP
    const customerToUpdate = await Customer.findOne({
      phone: customerPhoneToEnroll,
    });
    if (customerToUpdate) {
      // Ki·ªÉm tra xem kh√°ch h√†ng ƒë√£ ·ªü trong ch∆∞∆°ng tr√¨nh n√†y ch∆∞a
      const isAlreadyEnrolled = customerToUpdate.programEnrollments.some(
        (e) => e.programId.toString() === programResult._id.toString(),
      );

      if (!isAlreadyEnrolled) {
        await Customer.updateOne(
          { _id: customerToUpdate._id },
          {
            $push: {
              programEnrollments: {
                programId: programResult._id,
                stageId: programResult.stages[0]._id, // G√°n v√†o giai ƒëo·∫°n ƒë·∫ßu ti√™n
                statusId: null,
                enrolledAt: new Date(),
              },
            },
          },
        );
        console.log(
          `   -> ‚úÖ ƒê√£ g√°n kh√°ch h√†ng SƒêT ${customerPhoneToEnroll} v√†o ch∆∞∆°ng tr√¨nh VIP.`,
        );
      } else {
        console.log(
          `   -> ‚ÑπÔ∏è Kh√°ch h√†ng SƒêT ${customerPhoneToEnroll} ƒë√£ c√≥ trong ch∆∞∆°ng tr√¨nh VIP.`,
        );
      }
    } else {
      console.log(
        `   -> ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng c√≥ SƒêT ${customerPhoneToEnroll} ƒë·ªÉ g√°n.`,
      );
    }
  } catch (error) {
    console.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th√™m d·ªØ li·ªáu:", error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log("\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MongoDB.");
    }
  }
}

// Ch·∫°y script
seedData();
