// scripts/get-unique-actions.js
import { Schema, mongoose } from "mongoose";
import dotenv from "dotenv";
import fs from "fs/promises";
import path from "path";

dotenv.config({ path: ".env" });

// =================================================================
// === SCRIPT PH√ÇN T√çCH V√Ä TR√çCH XU·∫§T C√ÅC H√ÄNH ƒê·ªòNG DUY NH·∫§T ===
// =================================================================

// ƒê·ªãnh nghƒ©a m·ªôt schema t·ªëi gi·∫£n ƒë·ªÉ Mongoose c√≥ th·ªÉ ƒë·ªçc collection.
// collection: 'actionhistories_old' -> Tr·ªè ƒë·∫øn collection ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t√™n.
const HistoryOldSchema = new Schema(
  {},
  { strict: false, collection: "actionhistories" },
);
const History_Old =
  mongoose.models.History_Old ||
  mongoose.model("History_Old", HistoryOldSchema);

async function getUniqueActions() {
  const mongoURI = process.env.MONGODB_URI;
  if (!mongoURI) {
    console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng 'MONGODB_URI' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
    return;
  }

  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...");
    await mongoose.connect(mongoURI);
    console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

    console.log(
      "\n--- ‚≠ê B·∫Øt ƒë·∫ßu truy v·∫•n c√°c h√†nh ƒë·ªông duy nh·∫•t t·ª´ 'actionhistories_old' ---",
    );

    // Pipeline ƒë·ªÉ gom nh√≥m theo 'action' v√† l·∫•y ra document m·∫´u ƒë·∫ßu ti√™n
    const pipeline = [
      {
        $group: {
          _id: "$action",
          sampleDocument: { $first: "$$ROOT" },
        },
      },
      {
        $replaceRoot: {
          newRoot: "$sampleDocument",
        },
      },
      {
        // S·∫Øp x·∫øp k·∫øt qu·∫£ theo t√™n action cho d·ªÖ ƒë·ªçc
        $sort: {
          action: 1,
        },
      },
    ];

    const uniqueActions = await History_Old.aggregate(pipeline);

    if (uniqueActions.length > 0) {
      console.log(
        `   -> ‚úÖ T√¨m th·∫•y ${uniqueActions.length} lo·∫°i h√†nh ƒë·ªông duy nh·∫•t.`,
      );
      const outputPath = path.resolve(process.cwd(), "unique_actions.json");

      // Ghi k·∫øt qu·∫£ ra file JSON
      // `null, 2` ƒë·ªÉ format file JSON cho ƒë·∫πp v√† d·ªÖ ƒë·ªçc
      await fs.writeFile(
        outputPath,
        JSON.stringify(uniqueActions, null, 2),
        "utf-8",
      );
      console.log(`   -> ‚úÖ ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: ${outputPath}`);
    } else {
      console.log(
        "   -> ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£n ghi l·ªãch s·ª≠ n√†o trong 'actionhistories_old'.",
      );
    }
  } catch (error) {
    console.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:", error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log("\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi MongoDB. Qu√° tr√¨nh k·∫øt th√∫c.");
    }
  }
}

getUniqueActions();
