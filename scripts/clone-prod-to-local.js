// scripts/clone-prod-to-local.js
import { execSync } from "child_process";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { URL } from "url";
import mongoose from "mongoose";

// =================================================================
// === NODE.JS SCRIPT SAO CH√âP DATABASE (v3 - X√ìA S·∫†CH DB LOCAL) ===
// =================================================================

// --- H√†m ti·ªán √≠ch ƒë·ªÉ in m√†u cho console ---
const color = {
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  bold: (text) => `\x1b[1m${text}\x1b[0m`,
};

// --- Logic ch√≠nh ---
async function runClone() {
  console.log(
    color.green(
      "üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh sao ch√©p d·ªØ li·ªáu t·ª´ Production v·ªÅ Local...",
    ),
  );

  // 1. N·∫°p bi·∫øn m√¥i tr∆∞·ªùng m·ªôt c√°ch an to√†n
  const envPath = fs.existsSync(".env.local") ? ".env.local" : ".env";
  if (!fs.existsSync(envPath)) {
    console.log(color.red(`‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file ${envPath}.`));
    process.exit(1);
  }
  dotenv.config({ path: envPath });

  // 2. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
  const { MONGODB_URI_PROD, MONGODB_URI } = process.env;
  if (!MONGODB_URI_PROD || !MONGODB_URI) {
    console.log(
      color.red(
        "‚ùå L·ªói: Vui l√≤ng ƒë·ªãnh nghƒ©a MONGODB_URI_PROD (production) v√† MONGODB_URI (local) trong file .env.",
      ),
    );
    process.exit(1);
  }

  // 3. ƒê·ªãnh nghƒ©a th∆∞ m·ª•c sao l∆∞u
  const DUMP_DIR = "dump_prod";
  const dumpPath = path.resolve(process.cwd(), DUMP_DIR);

  // ** MODIFIED: T·ª± ƒë·ªông tr√≠ch xu·∫•t t√™n DB t·ª´ URI production
  let prodDbName;
  try {
    const parsedUrl = new URL(MONGODB_URI_PROD);
    prodDbName = parsedUrl.pathname.slice(1);
    if (!prodDbName) {
      throw new Error("Kh√¥ng t√¨m th·∫•y t√™n database trong MONGODB_URI_PROD.");
    }
  } catch (e) {
    console.log(color.red(`‚ùå L·ªói: URI production kh√¥ng h·ª£p l·ªá. ${e.message}`));
    process.exit(1);
  }

  const restoreSourcePath = path.join(DUMP_DIR, prodDbName);

  let localConnection;
  try {
    // 4. Ch·∫°y MONGODUMP
    console.log(
      color.yellow("\n--- B∆∞·ªõc 1/3: ƒêang sao l∆∞u (dump) t·ª´ Production ---"),
    );
    console.log(`Ngu·ªìn: ${MONGODB_URI_PROD}`);
    console.log(`Th∆∞ m·ª•c ƒë√≠ch: ${dumpPath}`);
    execSync(
      `mongodump --uri="${MONGODB_URI_PROD}" --out="${DUMP_DIR}" --forceTableScan`,
      { stdio: "inherit" },
    );
    console.log(color.green("‚úÖ Sao l∆∞u t·ª´ Production th√†nh c√¥ng!"));

    // 5. ++ ADDED: X√≥a s·∫°ch Database Local
    console.log(
      color.yellow("\n--- B∆∞·ªõc 2/3: ƒêang x√≥a s·∫°ch (drop) database Local ---"),
    );
    console.log(`K·∫øt n·ªëi t·ªõi Local DB ƒë·ªÉ th·ª±c hi·ªán x√≥a...`);
    localConnection = await mongoose.createConnection(MONGODB_URI).asPromise();
    await localConnection.dropDatabase();
    console.log(
      color.green(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng database: "${localConnection.name}"`),
    );
    await localConnection.close();

    // 6. Ch·∫°y MONGORESTORE
    console.log(
      color.yellow("\n--- B∆∞·ªõc 3/3: ƒêang ph·ª•c h·ªìi (restore) v√†o Local ---"),
    );
    console.log(`Ngu·ªìn ph·ª•c h·ªìi: ${restoreSourcePath}`);
    execSync(`mongorestore --uri="${MONGODB_URI}" "${restoreSourcePath}"`, {
      stdio: "inherit",
    });
    console.log(color.green("‚úÖ Ph·ª•c h·ªìi v√†o Local th√†nh c√¥ng!"));
  } catch (error) {
    console.error(
      color.red("\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:"),
      error.message,
    );
    if (localConnection) await localConnection.close(); // ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi n·∫øu c√≥ l·ªói
    process.exit(1);
  } finally {
    // 6. D·ªçn d·∫πp
    console.log(color.yellow("\n--- D·ªçn d·∫πp ---"));
    if (fs.existsSync(dumpPath)) {
      fs.rmSync(dumpPath, { recursive: true, force: true });
      console.log(`üóëÔ∏è  ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m '${DUMP_DIR}'.`);
    }
  }

  console.log(
    color.green(
      color.bold(
        "\nüéâ HO√ÄN T·∫§T! D·ªØ li·ªáu t·ª´ Production ƒë√£ ƒë∆∞·ª£c sao ch√©p v√† ƒë·ªìng b·ªô ho√†n to√†n v√†o Local.",
      ),
    ),
  );
}

// Ch·∫°y h√†m ch√≠nh
//!!!!!!! Ch·ªâ ch·∫°y khi mu·ªën sync ho√†n to√†n db t·ª´ production v·ªÅ local !!!!!!
runClone();
