import { NextResponse } from "next/server";
import connectDB from "@/config/connectDB";
import Customer from "@/models/customer";
import ScheduledJob from "@/models/schedule";
import ArchivedJob from "@/models/archivedJob";
import Variant from "@/models/variant";
import { revalidateTag } from "next/cache";
import ZaloAccount from "@/models/zalo";
import {
  logExecuteScheduleTask,
  logAutoCancelTask,
  logAutoCancelTaskForZaloFailure,
} from "@/app/actions/historyActions";
import mongoose from "mongoose";
import { revalidateAndBroadcast } from "@/lib/revalidation";

const cors = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

export const OPTIONS = () => new NextResponse(null, { headers: cors });

/**
 * Sinh tin nh·∫Øn cu·ªëi c√πng t·ª´ template v√† c√°c bi·∫øn th·ªÉ trong DB.
 */
const generateFinalMessage = (messageTemplate, variants) => {
  if (!messageTemplate || !variants || !variants.length) {
    return messageTemplate;
  }
  let finalMessage = messageTemplate;
  const placeholders = messageTemplate.match(/{\w+}/g) || [];

  for (const placeholder of placeholders) {
    const variantName = placeholder.slice(1, -1).toLowerCase();
    const variant = variants.find((v) => v.name === variantName);
    if (variant && variant.words.length > 0) {
      const randomWord =
        variant.words[Math.floor(Math.random() * variant.words.length)];
      finalMessage = finalMessage.replace(placeholder, randomWord);
    }
  }
  return finalMessage;
};

/**
 * G·ª≠i y√™u c·∫ßu ƒë·∫øn script b√™n ngo√†i.
 */
const executeExternalScript = async (type, acc, person, cfg, variants) => {
  let finalMessage = null;
  if (type === "sendMessage" && cfg.messageTemplate) {
    finalMessage = generateFinalMessage(cfg.messageTemplate, variants);
  }
  if (!acc || !acc.action) {
    throw new Error(
      `T√†i kho·∫£n Zalo ${acc?.name || ""} ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh script action.`,
    );
  }
  const response = await fetch(acc.action, {
    method: "POST",
    headers: { "Content-Type": "text/plain;charset=utf-8" },
    body: JSON.stringify({
      uid: acc.uid,
      phone: person.phone,
      uidPerson: person.uid || null,
      actionType: type,
      message: finalMessage || "",
    }),
    cache: "no-store",
  });

  // ** MODIFIED: N√©m l·ªói ngay c·∫£ khi response.ok = true nh∆∞ng script b√°o l·ªói
  const textResponse = await response.text();
  try {
    const jsonResponse = JSON.parse(textResponse);
    if (!response.ok || jsonResponse.status === "error") {
      throw new Error(jsonResponse.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ script");
    }
    return { finalMessage, scriptResult: jsonResponse.data };
  } catch (e) {
    // N·∫øu parse l·ªói (nh∆∞ l·ªói JSON input), n√©m l·ªói v·ªõi n·ªôi dung text g·ªëc
    if (e instanceof SyntaxError) {
      throw new Error(`L·ªói h·ªá th·ªëng: ${e.toString()}${textResponse}`);
    }
    throw e; // N√©m l·∫°i l·ªói ban ƒë·∫ßu n·∫øu kh√¥ng ph·∫£i l·ªói parse
  }
};

const updateDataAfterExecution = async ({
  actionType,
  apiResult,
  customerId,
}) => {
  const customer = await Customer.findById(customerId).select("uid").lean();
  if (!customer) return;

  const updatePayload = {};
  const { uidStatus, targetUid, actionMessage, actionStatus } = apiResult;

  if (actionType === "findUid" || (actionType === "sendMessage" && uidStatus)) {
    if (uidStatus === "found_new" && targetUid) {
      updatePayload.uid = targetUid;
    } else if (uidStatus === "provided" && actionStatus === "error") {
      updatePayload.uid = null;
    } else if (uidStatus === "not_found") {
      if (actionMessage && actionMessage.includes("qu√° nhi·ªÅu l·∫ßn")) {
        if (!customer.uid || !/^\d+$/.test(customer.uid)) {
          updatePayload.uid = null;
        }
      } else {
        updatePayload.uid = actionMessage || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      }
    } else if (actionType === "findUid" && actionStatus === "error") {
      updatePayload.uid = actionMessage || "L·ªói th·ª±c thi script";
    }
  }

  if (Object.keys(updatePayload).length > 0) {
    await Customer.updateOne({ _id: customerId }, { $set: updatePayload });
  }
};

/**
 * L∆∞u tr·ªØ, d·ªçn d·∫πp v√† x√≥a m·ªôt Job ƒë√£ ho√†n th√†nh.
 * @param {object} jobToFinish - Document c·ªßa job s·∫Øp ho√†n th√†nh.
 * @param {'completed' | 'failed'} finalStatus - Tr·∫°ng th√°i cu·ªëi c√πng c·ªßa job.
 */
// ** MODIFIED: Th√™m tham s·ªë finalStatus
const archiveAndCleanupJob = async (
  completedJob,
  finalStatus = "completed",
) => {
  if (!completedJob) return;

  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const customerIdsInJob = (completedJob.tasks || []).map(
      (task) => new mongoose.Types.ObjectId(task.person._id),
    );

    if (customerIdsInJob.length > 0) {
      await Customer.updateMany(
        { _id: { $in: customerIdsInJob } },
        { $pull: { action: { job: completedJob._id } } },
        { session },
      );
    }

    // B∆∞·ªõc 2: L∆∞u tr·ªØ job
    const archiveData = {
      ...completedJob, // **MODIFIED: Ch·∫•p nh·∫≠n c·∫£ object thu·∫ßn
      _id: completedJob._id,
      // ** MODIFIED: S·ª≠ d·ª•ng tr·∫°ng th√°i cu·ªëi c√πng ƒë∆∞·ª£c truy·ªÅn v√†o
      status: finalStatus,
      completedAt: new Date(),
    };
    delete archiveData.tasks;
    await ArchivedJob.create([archiveData], { session });
    await ScheduledJob.findByIdAndDelete(completedJob._id, { session });
    await session.commitTransaction();
  } catch (error) {
    await session.abortTransaction();
    console.error(
      `[ARCHIVE FAILED] L·ªói khi l∆∞u tr·ªØ Job ${completedJob._id}:`,
      error,
    );
  } finally {
    session.endSession();
  }
};

export const GET = async () => {
  try {
    await connectDB();
    const now = new Date();

    // ** MODIFIED: LOGIC D·ªåN D·∫∏P N√ÇNG C·∫§P **
    // C∆° ch·∫ø 1: D·ªçn d·∫πp c√°c job ƒë√£ ho√†n th√†nh (thay $where b·∫±ng $expr)
    const lingeringJobs = await ScheduledJob.find({
      "statistics.total": { $gt: 0 },
      $expr: {
        $gte: [
          { $add: ["$statistics.completed", "$statistics.failed"] },
          "$statistics.total",
        ],
      },
    }).lean();

    for (const job of lingeringJobs) {
      console.log(`üßπ D·ªçn d·∫πp job ƒë√£ ho√†n th√†nh: ${job.jobName}`);
      await archiveAndCleanupJob(job);
    }

    // C∆° ch·∫ø 2: D·ªçn d·∫πp c√°c task b·ªã treo (self-healing)
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
    const timedOutJobs = await ScheduledJob.find({
      "tasks.status": "processing",
      "tasks.processedAt": { $lt: fiveMinutesAgo },
    });

    for (const job of timedOutJobs) {
      const tasksToFail = job.tasks.filter(
        (t) =>
          t.status === "processing" && new Date(t.processedAt) < fiveMinutesAgo,
      );
      if (tasksToFail.length > 0) {
        const taskIdsToFail = tasksToFail.map((t) => t._id);
        const customerIdsToClean = tasksToFail.map((t) => t.person._id);
        await Promise.all([
          ScheduledJob.updateOne(
            { _id: job._id },
            {
              $set: {
                "tasks.$[elem].status": "failed",
                "tasks.$[elem].resultMessage": "Task timed out",
              },
              $inc: { "statistics.failed": tasksToFail.length },
            },
            { arrayFilters: [{ "elem._id": { $in: taskIdsToFail } }] },
          ),
          Customer.updateMany(
            { _id: { $in: customerIdsToClean } },
            { $pull: { action: { job: job._id } } },
          ),
        ]);
      }
    }
    const handleZaloTokenFailure = async (job, task, errorMessage) => {
      console.log(
        `üî¥ L·ªói Token Zalo cho TK ${zaloAccountId} trong Job ${jobId}. B·∫Øt ƒë·∫ßu h·ªßy to√†n b·ªô chi·∫øn d·ªãch.`,
      );
      const session = await mongoose.startSession();
      try {
        session.startTransaction();
        // B∆∞·ªõc 1: V√¥ hi·ªáu h√≥a t√†i kho·∫£n Zalo
        await ZaloAccount.findByIdAndUpdate(
          zaloAccountId,
          { isTokenActive: false },
          { session },
        );
        console.log(`   -> ƒê√£ ƒë·∫∑t isTokenActive = false cho t√†i kho·∫£n Zalo.`);

        // B∆∞·ªõc 2: T√¨m job v√† c√°c task c√≤n l·∫°i ƒë·ªÉ h·ªßy
        const jobToCancel = await ScheduledJob.findById(jobId)
          .session(session)
          .lean();
        if (!jobToCancel) {
          console.log(
            `   -> Job ${jobId} kh√¥ng c√≤n t·ªìn t·∫°i, c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.`,
          );
          await session.abortTransaction();
          return;
        }

        const remainingTasks = jobToCancel.tasks.filter(
          (t) => t.status === "pending",
        );
        if (remainingTasks.length > 0) {
          const remainingTaskIds = remainingTasks.map((t) => t._id);
          const remainingCustomerIds = remainingTasks.map((t) => t.person._id);
          console.log(
            `   -> T√¨m th·∫•y ${remainingTasks.length} task 'pending' c·∫ßn h·ªßy.`,
          );

          // B∆∞·ªõc 3: Ghi log cho t·ª´ng task b·ªã h·ªßy
          for (const remainingTask of remainingTasks) {
            await logAutoCancelTaskForZaloFailure(
              jobToCancel,
              remainingTask,
              errorMessage,
            );
          }
          console.log(
            `   -> ƒê√£ ghi log h·ªßy h√†ng lo·∫°t cho ${remainingTasks.length} task.`,
          );

          // B∆∞·ªõc 4: C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th·ªëng k√™ cho c√°c task c√≤n l·∫°i
          await ScheduledJob.updateOne(
            { _id: jobId },
            {
              $set: {
                "tasks.$[elem].status": "failed",
                "tasks.$[elem].resultMessage": "H·ªßy do l·ªói t√†i kho·∫£n Zalo",
              },
              $inc: { "statistics.failed": remainingTasks.length },
            },
            {
              arrayFilters: [{ "elem._id": { $in: remainingTaskIds } }],
              session,
            },
          );

          // D·ªçn d·∫πp customer refs
          await Customer.updateMany(
            { _id: { $in: remainingCustomerIds } },
            { $pull: { action: { job: jobId } } },
            { session },
          );
        } else {
          console.log("   -> Kh√¥ng c√≥ task 'pending' n√†o c·∫ßn h·ªßy.");
        }

        // B∆∞·ªõc 5: K·∫øt th√∫c v√† l∆∞u tr·ªØ chi·∫øn d·ªãch v·ªõi tr·∫°ng th√°i 'failed'
        const finalJobState = await ScheduledJob.findById(jobId)
          .session(session)
          .lean();
        await archiveAndCleanupJob(finalJobState, "failed");
        console.log(`   -> ƒê√£ l∆∞u tr·ªØ v√† k·∫øt th√∫c chi·∫øn d·ªãch.`);

        await session.commitTransaction();
        revalidateAndBroadcast("zalo_accounts");
      } catch (error) {
        await session.abortTransaction();
        console.error(
          `L·ªói khi x·ª≠ l√Ω Zalo Token Failure cho job ${jobId}:`,
          error,
        );
      } finally {
        session.endSession();
      }
    };

    let processedCount = 0;
    const allVariants = await Variant.find().lean();

    // B∆Ø·ªöC 1: L·∫§Y T·∫§T C·∫¢ TASK ƒê·∫æN H·∫†N T·ª™ M·ªåI CHI·∫æN D·ªäCH
    const dueTasks = await ScheduledJob.aggregate([
      // T√¨m c√°c chi·∫øn d·ªãch c√≥ task c·∫ßn ch·∫°y
      {
        $match: {
          "tasks.status": "pending",
          "tasks.scheduledFor": { $lte: now },
        },
      },
      // "Bung" m·∫£ng tasks ra th√†nh c√°c document ri√™ng l·∫ª
      { $unwind: "$tasks" },
      // L·ªçc l·∫°i m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ch·ªâ gi·ªØ l·∫°i c√°c task th·ªèa m√£n ƒëi·ªÅu ki·ªán
      {
        $match: {
          "tasks.status": "pending",
          "tasks.scheduledFor": { $lte: now },
        },
      },
      // S·∫Øp x·∫øp T·∫§T C·∫¢ C√ÅC TASK theo th·ªùi gian ƒë·∫øn h·∫°n
      { $sort: { "tasks.scheduledFor": 1 } },
      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng task x·ª≠ l√Ω trong m·ªôt l·∫ßn ch·∫°y cron ƒë·ªÉ tr√°nh qu√° t·∫£i
      { $limit: 20 },
      // Gom l·∫°i c√°c th√¥ng tin c·∫ßn thi·∫øt
      {
        $project: {
          jobId: "$_id",
          jobName: "$jobName",
          actionType: "$actionType",
          zaloAccount: "$zaloAccount",
          config: "$config",
          createdBy: "$createdBy",
          task: "$tasks",
        },
      },
    ]);

    if (dueTasks.length === 0) {
      // Logic d·ªçn d·∫πp job b·ªã treo v·∫´n gi·ªØ nguy√™n
      const lingeringJobs = await ScheduledJob.find({
        $where:
          "this.statistics.total > 0 && (this.statistics.completed + this.statistics.failed) >= this.statistics.total",
      });
      for (const job of lingeringJobs) {
        console.log(`üßπ D·ªçn d·∫πp job b·ªã treo (h·∫øt task): ${job.jobName}`);
        await archiveAndCleanupJob(job);
      }
      return NextResponse.json({
        headers: cors,
        message: "Kh√¥ng c√≥ task n√†o ƒë·∫øn h·∫°n.",
      });
    }

    // B∆Ø·ªöC 2: X·ª¨ L√ù TU·∫¶N T·ª∞ T·ª™NG TASK ƒê√É L·ªåC
    for (const item of dueTasks) {
      const { jobId, task } = item;

      try {
        const lockResult = await ScheduledJob.findOneAndUpdate(
          { _id: jobId, "tasks._id": task._id, "tasks.status": "pending" },
          {
            $set: {
              "tasks.$.status": "processing",
              "tasks.$.processedAt": new Date(),
            },
          },
          { projection: { _id: 1 } },
        );

        if (!lockResult) continue; // Task ƒë√£ b·ªã ti·∫øn tr√¨nh kh√°c kh√≥a, b·ªè qua

        // B∆Ø·ªöC 2: L·∫§Y D·ªÆ LI·ªÜU ƒê·∫¶Y ƒê·ª¶ SAU KHI KH√ìA TH√ÄNH C√îNG
        const jobUpdate = await ScheduledJob.findById(jobId).populate(
          "zaloAccount",
        );
        if (!jobUpdate) continue; // Job ƒë√£ b·ªã x√≥a, b·ªè qua

        let executionResult;

        try {
          const scriptResponse = await executeExternalScript(
            jobUpdate.actionType,
            jobUpdate.zaloAccount,
            task.person,
            jobUpdate.config,
            allVariants,
          );
          executionResult = {
            ...scriptResponse.scriptResult,
            finalMessage: scriptResponse.finalMessage,
          };
        } catch (e) {
          executionResult = { actionStatus: "error", actionMessage: e.message };
          // ** MODIFIED: B·∫Øt ƒë·∫ßu logic x·ª≠ l√Ω l·ªói token
          if (e.message.includes("SyntaxError: Unexpected end of JSON input")) {
            // L·∫•y l·∫°i b·∫£n ƒë·∫ßy ƒë·ªß c·ªßa job ƒë·ªÉ x·ª≠ l√Ω
            const fullJob = await ScheduledJob.findById(jobId)
              .populate("zaloAccount")
              .lean();
            if (fullJob) {
              await handleZaloTokenFailure(fullJob, task, e.message);
            }
            // B·ªè qua c√°c b∆∞·ªõc x·ª≠ l√Ω task hi·ªán t·∫°i v√† chuy·ªÉn sang task ti·∫øp theo c·ªßa job kh√°c
            continue;
          }
        }

        const statusName =
          executionResult.actionStatus === "success" ? "SUCCESS" : "FAILED";

        // ** MODIFIED: T√°i c·∫•u tr√∫c logic x·ª≠ l√Ω k·∫øt qu·∫£
        const { uidStatus, targetUid, actionMessage } = executionResult;
        const customerUpdatePayload = {};
        if (uidStatus === "found_new" && targetUid) {
          customerUpdatePayload.uid = targetUid;
        } else if (uidStatus === "provided" && statusName === "FAILED") {
          customerUpdatePayload.uid = null;
        } else if (
          uidStatus === "not_found" ||
          (jobUpdate.actionType === "findUid" && statusName === "FAILED")
        ) {
          customerUpdatePayload.uid = actionMessage || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
        }
        const jobInfoForLogging = {
          ...item,
          zaloAccountId: item.zaloAccount,
          jobId: item.jobId,
        };

        // Th·ª±c hi·ªán ghi log v√† c·∫≠p nh·∫≠t UID song song
        await Promise.all([
          logExecuteScheduleTask({
            jobInfo: jobInfoForLogging,
            task: task,
            customerId: task.person._id,
            statusName,
            executionResult,
            finalMessage: executionResult.finalMessage,
          }),
          Object.keys(customerUpdatePayload).length > 0
            ? Customer.updateOne(
                { _id: task.person._id },
                { $set: customerUpdatePayload },
              )
            : Promise.resolve(),
          Customer.updateOne(
            { _id: task.person._id },
            { $pull: { action: { job: jobId } } },
          ),
        ]);

        // ** MODIFIED: T√≠ch h·ª£p l·∫°i logic x·ª≠ l√Ω rate limit v√† d√πng bi·∫øn `jobUpdate`
        if (statusName === "FAILED" && jobUpdate.actionType === "findUid") {
          const errorMessage = executionResult.actionMessage || "";
          let cancelScope = null;
          if (errorMessage.includes("trong 1 gi·ªù")) cancelScope = "hour";
          else if (errorMessage.includes("trong 1 ng√†y")) cancelScope = "day";

          if (cancelScope) {
            const originalJobState = await ScheduledJob.findById(
              jobUpdate._id,
            ).lean();
            if (originalJobState) {
              const endTime = new Date(now);
              if (cancelScope === "hour") {
                endTime.setMinutes(59, 59, 999);
              } else {
                endTime.setHours(23, 59, 59, 999);
              }

              const tasksToCancel = (originalJobState.tasks || []).filter(
                (t) =>
                  t.status === "pending" && new Date(t.scheduledFor) <= endTime,
              );

              if (tasksToCancel.length > 0) {
                console.log(
                  `‚ö†Ô∏è  Ph√°t hi·ªán l·ªói gi·ªõi h·∫°n ${cancelScope}, ƒëang h·ªßy ${tasksToCancel.length} task...`,
                );
                const taskIdsToCancel = tasksToCancel.map((t) => t._id);
                const customerIdsToClean = tasksToCancel.map(
                  (t) => t.person._id,
                );
                for (const taskToCancel of tasksToCancel) {
                  await logAutoCancelTask(
                    originalJobState,
                    taskToCancel,
                    cancelScope,
                  );
                }
                await ScheduledJob.updateOne(
                  { _id: jobId },
                  { $set: { lastExecutionResult: resultMessage } },
                );

                await ScheduledJob.updateOne(
                  { _id: jobUpdate._id },
                  {
                    $set: {
                      "tasks.$[elem].status": "failed",
                      "tasks.$[elem].resultMessage": `T·ª± ƒë·ªông h·ªßy do ƒë·∫°t gi·ªõi h·∫°n ${cancelScope}`,
                    },
                    $inc: { "statistics.failed": tasksToCancel.length },
                  },
                  { arrayFilters: [{ "elem._id": { $in: taskIdsToCancel } }] },
                );

                await Customer.updateMany(
                  { _id: { $in: customerIdsToClean } },
                  { $pull: { action: { job: jobUpdate._id } } },
                );
              }
            }
          }
        }

        // B∆Ø·ªöC 2.4: C·∫¨P NH·∫¨T K·∫æT QU·∫¢ CU·ªêI C√ôNG V√ÄO ƒê√öNG TASK ƒê√ì
        const finalUpdateResult = await ScheduledJob.findOneAndUpdate(
          { _id: jobId, "tasks._id": task._id },
          {
            $set: {
              "tasks.$.status":
                statusName === "SUCCESS" ? "completed" : "failed",
              "tasks.$.resultMessage":
                executionResult.actionMessage || statusName,
            },
            $inc: {
              [statusName === "SUCCESS"
                ? "statistics.completed"
                : "statistics.failed"]: 1,
            },
          },
          { new: true },
        );
        processedCount++;

        // B∆Ø·ªöC 2.5: KI·ªÇM TRA HO√ÄN TH√ÄNH CHI·∫æN D·ªäCH
        if (finalUpdateResult) {
          const stats = finalUpdateResult.statistics;
          if (stats && stats.completed + stats.failed >= stats.total) {
            await archiveAndCleanupJob(finalUpdateResult);
          }
        }
      } catch (cronError) {
        console.error(
          `‚ùå L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω task ${task._id} c·ªßa job ${jobId}:`,
          cronError,
        );
        // ** MODIFIED: GHI L·∫†I L·ªñI H·ªÜ TH·ªêNG V√ÄO JOB CHA **
        await ScheduledJob.updateOne(
          { _id: jobId },
          {
            $set: { lastExecutionResult: `L·ªói h·ªá th·ªëng: ${cronError.message}` },
          },
        );
      }
    }

    if (processedCount > 0) {
      revalidateAndBroadcast("customer_data");
      revalidateAndBroadcast("running_jobs");
      revalidateAndBroadcast("archived_jobs");
    }

    return NextResponse.json({
      headers: cors,
      message: `Cron job ƒë√£ ch·∫°y. X·ª≠ l√Ω ${processedCount} t√°c v·ª•.`,
    });
  } catch (err) {
    console.error("CRON JOB FAILED:", err);
    return NextResponse.json(
      { message: "L·ªói nghi√™m tr·ªçng trong CRON job.", error: err.message },
      { status: 500 },
    );
  }
};
