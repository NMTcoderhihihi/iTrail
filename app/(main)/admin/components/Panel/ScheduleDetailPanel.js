// File: ScheduleDetailPanel.js (ƒê√£ c·∫≠p nh·∫≠t)
"use client";

import React, { useState, useTransition } from "react";
import styles from "./ScheduleDetailPanel.module.css";
import { usePanels } from "@/contexts/PanelContext";
import { stopSchedule } from "@/app/actions/campaignActions";
import PendingQueuePanel from "./PendingQueuePanel";
import ExecutionHistoryPanel from "./ExecutionHistoryPanel";

// M·ªôt component nh·ªè cho c√°c n√∫t b·∫•m, cho code s·∫°ch h∆°n
const ActionButton = ({ onClick, label, icon }) => (
  <button className={styles.actionButton} onClick={onClick}>
    {icon}
    <span>{label}</span>
  </button>
);
const InfoRow = ({ icon, label, value }) => (
  <div className={styles.infoRow}>
    <span className={styles.infoIcon}>{icon}</span>
    <span className={styles.infoLabel}>{label}</span>
    <span className={styles.infoValue}>{value || "Kh√¥ng c√≥"}</span>
  </div>
);

export default function ScheduleDetailPanel({
  panelData: job,
  closePanel,
  onScheduleUpdate,
  isArchived = false,
}) {
  const { openPanel } = usePanels();
  const [isPending, startTransition] = useTransition();

  const handleStopSchedule = () => {
    if (
      confirm(
        `B·∫°n c√≥ ch·∫Øc mu·ªën d·ª´ng v√† h·ªßy vƒ©nh vi·ªÖn l·ªãch tr√¨nh "${job.jobName}" kh√¥ng?`,
      )
    ) {
      startTransition(async () => {
        const result = await stopSchedule(job._id);
        if (result.error) alert(`L·ªói: ${result.error}`);
        else {
          onScheduleUpdate({ type: "STOP_SCHEDULE", jobId: job._id });
          closePanel();
        }
      });
    }
  };

  // M·ªü panel h√†ng ƒë·ª£i
  const handleOpenQueuePanel = () => {
    const panelId = `queue-${job._id}`;
    openPanel({
      id: panelId,
      title: `üë• H√†ng ƒë·ª£i: ${job.jobName}`,
      component: PendingQueuePanel,
      props: { panelData: { tasks: job.tasks } },
    });
  };

  // M·ªü panel l·ªãch s·ª≠
  const handleOpenHistoryPanel = () => {
    const panelId = `history-${job._id}`;
    openPanel({
      id: panelId,
      title: `üìú L·ªãch s·ª≠: ${job.jobName}`,
      component: ExecutionHistoryPanel,
      props: { panelData: { jobId: job._id } },
    });
  };

  const st = job.statistics || { total: 0, completed: 0, failed: 0 };
  const tasks = job.tasks || [];
  const progressValue =
    st.total > 0 ? ((st.completed + st.failed) / st.total) * 100 : 0;

  return (
    <div className={styles.panelContainer}>
      {/* Ph·∫ßn th√¥ng tin t·ªïng quan */}
      <div className={styles.overviewSection}>
        <div className={styles.overviewItem}>
          <span>B·∫Øt ƒë·∫ßu</span>
          <strong>{new Date(job.createdAt).toLocaleString("vi-VN")}</strong>
        </div>
        <div className={styles.overviewItem}>
          <span>{isArchived ? "Ho√†n th√†nh" : "D·ª± ki·∫øn xong"}</span>
          <strong>
            {job.estimatedCompletionTime
              ? new Date(job.estimatedCompletionTime).toLocaleString("vi-VN")
              : "N/A"}
          </strong>
        </div>
      </div>

      {/* Thanh ti·∫øn ƒë·ªô */}
      <div className={styles.progressSection}>
        <div className={styles.progressStats}>
          <span>
            Ho√†n th√†nh: <strong>{st.completed}</strong>
          </span>
          <span>
            Th·∫•t b·∫°i: <strong>{st.failed}</strong>
          </span>
          {!isArchived && (
            <span>
              ƒêang ch·ªù: <strong>{tasks.length}</strong>
            </span>
          )}
          <span>
            T·ªïng: <strong>{st.total}</strong>
          </span>
        </div>
        <div className={styles.progressBarContainer}>
          <div
            className={styles.progressBar}
            style={{ width: `${progressValue}%` }}
          />
        </div>
      </div>

      <div className={styles.configSection}>
        <h4 className={styles.sectionTitle}>Chi ti·∫øt C·∫•u h√¨nh</h4>
        <InfoRow icon="‚öôÔ∏è" label="Lo·∫°i h√†nh ƒë·ªông" value={job.actionType} />
        <InfoRow
          icon="üë§"
          label="T√†i kho·∫£n Zalo"
          value={job.zaloAccount?.name}
        />
        <InfoRow icon="üßë‚Äçüíª" label="Ng∆∞·ªùi t·∫°o l·ªãch" value={job.createdBy?.name} />
        <InfoRow
          icon="‚ö°"
          label="T·ªëc ƒë·ªô"
          value={`${job.config?.actionsPerHour || 50} h√†nh ƒë·ªông/gi·ªù`}
        />
      </div>

      {/* C√°c n√∫t h√†nh ƒë·ªông ƒë·ªÉ m·ªü panel con */}
      <div className={styles.actionsContainer}>
        {!isArchived && (
          <ActionButton
            label={`H√†ng ƒë·ª£i (${tasks.length})`}
            icon="üë•"
            onClick={handleOpenQueuePanel}
          />
        )}
        <ActionButton
          label="L·ªãch s·ª≠ th·ª±c thi"
          icon="üìú"
          onClick={handleOpenHistoryPanel}
        />
      </div>

      {job.actionType === "sendMessage" && job.config.messageTemplate && (
        <div className={styles.messageSection}>
          <h4>N·ªôi dung tin nh·∫Øn</h4>
          <pre className={styles.messageContent}>
            {job.config.messageTemplate}
          </pre>
        </div>
      )}

      {!isArchived && (
        <div className={styles.panelFooter}>
          <button
            onClick={handleStopSchedule}
            className={styles.stopButton}
            disabled={isPending || job.status === "completed"}
          >
            {isPending ? "ƒêang x·ª≠ l√Ω..." : "D·ª´ng & H·ªßy L·ªãch tr√¨nh"}
          </button>
        </div>
      )}
    </div>
  );
}
