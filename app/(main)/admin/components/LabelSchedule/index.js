"use client";

import React, { useState, useTransition } from "react";
import styles from "../../admin.module.css";
import { useRouter } from "next/navigation";

import {
  deleteLabel,
  createOrUpdateLabel,
} from "@/app/actions/campaignActions";
import CampaignPanel from "../Panel/editLabelPanel";
import RunningCampaigns from "./runningCampaigns";
import ArchivedCampaigns from "./archivedCampaigns";

// Component n√†y gi·ªù qu·∫£n l√Ω c·∫£ RunningCampaigns v√† b·∫£ng Labels
export default function LabelManager({
  openPanel,
  closePanel,
  runningJobs,
  setRunningJobs,
  archivedJobs,
  campaigns,
  setCampaigns,
}) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  const [activeTab, setActiveTab] = useState("running");

  const handleSave = (data) => {
    startTransition(async () => {
      const result = await createOrUpdateLabel(data);
      if (result.error) {
        alert(`L·ªói: ${result.error}`);
      } else {
        // D·ªØ li·ªáu m·ªõi tr·∫£ v·ªÅ t·ª´ server
        const savedLabel = result.data;

        // Ki·ªÉm tra xem ƒë√¢y l√† t·∫°o m·ªõi hay c·∫≠p nh·∫≠t
        if (data.id) {
          // C·∫¨P NH·∫¨T: T√¨m v√† thay th·∫ø nh√£n c≈© trong m·∫£ng state
          setCampaigns((prev) =>
            prev.map((c) => (c._id === savedLabel._id ? savedLabel : c)),
          );
        } else {
          // T·∫†O M·ªöI: Th√™m nh√£n m·ªõi v√†o ƒë·∫ßu m·∫£ng state
          setCampaigns((prev) => [savedLabel, ...prev]);
        }
      }
    });
  };

  const handleCreate = () => {
    const panelId = `label-new-${Date.now()}`;
    openPanel({
      id: panelId,
      title: "‚ú® T·∫°o Nh√£n n·ªôi dung m·ªõi",
      component: CampaignPanel, // D√πng logic c≈©, truy·ªÅn th·∫≥ng component
      props: {
        onSave: handleSave,
        panelId: panelId, // Truy·ªÅn panelId ri√™ng
        closePanel: closePanel, // Truy·ªÅn h√†m closePanel g·ªëc
      },
    });
  };

  const handleEdit = (label) => {
    const panelId = `label-edit-${label._id}`;
    openPanel({
      id: panelId,
      title: `‚úèÔ∏è Ch·ªânh s·ª≠a: ${label.title}`,
      component: CampaignPanel,
      props: {
        panelData: label,
        onSave: handleSave,
        panelId: panelId, // Truy·ªÅn panelId ri√™ng
        closePanel: closePanel, // Truy·ªÅn h√†m closePanel g·ªëc
      },
    });
  };

  const handleDelete = (id) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√£n n√†y kh√¥ng?")) {
      startTransition(async () => {
        await deleteLabel(id);
        setCampaigns((prev) => prev.filter((c) => c._id !== id));
      });
    }
  };

  return (
    <div>
      <div className={styles.componentHeader}>
        <h2>üóìÔ∏è Qu·∫£n l√Ω Chi·∫øn d·ªãch</h2>
        <div className={styles.tabContainer}>
          <button
            className={`${styles.tabButton} ${
              activeTab === "running" ? styles.active : ""
            }`}
            onClick={() => setActiveTab("running")}
          >
            ƒêang ch·∫°y ({runningJobs.length})
          </button>
          <button
            className={`${styles.tabButton} ${
              activeTab === "history" ? styles.active : ""
            }`}
            onClick={() => setActiveTab("history")}
          >
            L·ªãch s·ª≠
          </button>
        </div>
      </div>

      {/* Hi·ªÉn th·ªã component t∆∞∆°ng ·ª©ng v·ªõi tab */}
      {activeTab === "running" && (
        <RunningCampaigns
          jobs={runningJobs}
          setJobs={setRunningJobs}
          openPanel={openPanel}
          closePanel={closePanel}
        />
      )}
      {activeTab === "history" && <ArchivedCampaigns jobs={archivedJobs} />}

      {/* 2. Hi·ªÉn th·ªã b·∫£ng qu·∫£n l√Ω Nh√£n ·ªü d∆∞·ªõi */}
      <div className={styles.componentHeader} style={{ marginTop: "24px" }}>
        <h2>üìù Qu·∫£n l√Ω Nh√£n (M·∫´u n·ªôi dung)</h2>
        <button
          onClick={handleCreate}
          className={styles.createButton}
          disabled={isPending}
        >
          + T·∫°o m·ªõi
        </button>
      </div>

      <table className={styles.table}>
        <thead>
          <tr>
            <th>T√™n nh√£n (Title)</th>
            <th>M√¥ t·∫£ (Description)</th>
            <th style={{ width: "150px" }}>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {campaigns?.map((label) => (
            <tr key={label._id}>
              <td>{label.title}</td>
              <td>{label.desc || "..."}</td>
              <td className={styles.actionCell}>
                <button
                  onClick={() => handleEdit(label)}
                  className={styles.editButton}
                  disabled={isPending}
                >
                  S·ª≠a
                </button>
                <button
                  onClick={() => handleDelete(label._id)}
                  className={styles.deleteButton}
                  disabled={isPending}
                >
                  X√≥a
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
